name: üß™ MySQL Connection Test

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Verbose output'
        required: false
        default: false
        type: boolean

jobs:
  mysql-test:
    name: üîç Test po≈ÇƒÖczenia MySQL
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    env:
      PYTHONUNBUFFERED: 1
      
    steps:
      - name: üì• Checkout kodu
        uses: actions/checkout@v4
        
      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üîß Zainstaluj system dependencies dla MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config
          
      - name: üì¶ Zainstaluj MySQL connectors
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install mysql-connector-python==8.2.0 PyMySQL==1.1.0 python-dotenv
          
      - name: üîç Test import√≥w
        run: |
          python -c "
          import sys
          print(f'üêç Python version: {sys.version}')
          print('üì¶ Sprawdzanie dostƒôpnych connector√≥w...')
          
          try:
              import mysql.connector
              print('‚úÖ mysql.connector: AVAILABLE')
              print(f'   Version: {mysql.connector.__version__}')
          except ImportError as e:
              print(f'‚ùå mysql.connector: FAILED - {e}')
          
          try:
              import pymysql
              print('‚úÖ PyMySQL: AVAILABLE')
              print(f'   Version: {pymysql.__version__}')
          except ImportError as e:
              print(f'‚ùå PyMySQL: FAILED - {e}')
          
          print('üì¶ Zainstalowane pakiety MySQL:')
          import pkg_resources
          installed = [d.project_name for d in pkg_resources.working_set]
          mysql_packages = [p for p in installed if 'mysql' in p.lower() or 'pymysql' in p.lower()]
          for pkg in mysql_packages:
              print(f'   - {pkg}')
          "
          
      - name: üß™ Test po≈ÇƒÖczenia z bazƒÖ danych
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          python -c "
          import os
          
          print('üîç Test po≈ÇƒÖczenia z bazƒÖ MySQL...')
          
          # Sprawd≈∫ zmienne ≈õrodowiskowe
          required_vars = ['MYSQL_HOST', 'MYSQL_PORT', 'MYSQL_USER', 'MYSQL_PASSWORD', 'MYSQL_DATABASE']
          missing_vars = [var for var in required_vars if not os.getenv(var)]
          
          if missing_vars:
              print(f'‚ùå BrakujƒÖce zmienne ≈õrodowiskowe: {missing_vars}')
              exit(1)
          
          print(f'üè¢ Host: {os.environ.get(\"MYSQL_HOST\", \"not_set\")}')
          print(f'üîå Port: {os.environ.get(\"MYSQL_PORT\", \"not_set\")}')
          print(f'üë§ User: {os.environ.get(\"MYSQL_USER\", \"not_set\")}')
          print(f'üóÑÔ∏è Database: {os.environ.get(\"MYSQL_DATABASE\", \"not_set\")}')
          
          # Test po≈ÇƒÖczenia z fallback
          connection_successful = False
          
          # Pr√≥ba 1: mysql.connector
          try:
              import mysql.connector
              print('üì¶ Testowanie mysql.connector...')
              
              conn = mysql.connector.connect(
                  host=os.environ['MYSQL_HOST'],
                  port=int(os.environ['MYSQL_PORT']),
                  user=os.environ['MYSQL_USER'],
                  password=os.environ['MYSQL_PASSWORD'],
                  database=os.environ['MYSQL_DATABASE']
              )
              print('‚úÖ mysql.connector: CONNECTION OK')
              
              cursor = conn.cursor()
              cursor.execute('SELECT VERSION()')
              version = cursor.fetchone()[0]
              print(f'üìä MySQL version: {version}')
              
              cursor.execute(\"SHOW TABLES LIKE 'nieruchomosci'\")
              table_exists = cursor.fetchone() is not None
              print(f'üóÑÔ∏è Tabela nieruchomosci: {\"EXISTS\" if table_exists else \"NOT FOUND\"}')
              
              if table_exists:
                  cursor.execute('SELECT COUNT(*) FROM nieruchomosci')
                  count = cursor.fetchone()[0]
                  print(f'üìä Liczba rekord√≥w: {count:,}')
              
              conn.close()
              connection_successful = True
              
          except ImportError as e:
              print(f'‚ùå mysql.connector import failed: {e}')
          except Exception as e:
              print(f'‚ùå mysql.connector connection failed: {e}')
          
          # Pr√≥ba 2: PyMySQL (je≈õli pierwsza nie powiod≈Ça siƒô)
          if not connection_successful:
              try:
                  import pymysql
                  print('üì¶ Testowanie PyMySQL...')
                  
                  conn = pymysql.connect(
                      host=os.environ['MYSQL_HOST'],
                      port=int(os.environ['MYSQL_PORT']),
                      user=os.environ['MYSQL_USER'],
                      password=os.environ['MYSQL_PASSWORD'],
                      database=os.environ['MYSQL_DATABASE']
                  )
                  print('‚úÖ PyMySQL: CONNECTION OK')
                  
                  cursor = conn.cursor()
                  cursor.execute('SELECT VERSION()')
                  version = cursor.fetchone()[0]
                  print(f'üìä MySQL version: {version}')
                  
                  cursor.execute(\"SHOW TABLES LIKE 'nieruchomosci'\")
                  table_exists = cursor.fetchone() is not None
                  print(f'üóÑÔ∏è Tabela nieruchomosci: {\"EXISTS\" if table_exists else \"NOT FOUND\"}')
                  
                  if table_exists:
                      cursor.execute('SELECT COUNT(*) FROM nieruchomosci')
                      count = cursor.fetchone()[0]
                      print(f'üìä Liczba rekord√≥w: {count:,}')
                  
                  conn.close()
                  connection_successful = True
                  
              except ImportError as e:
                  print(f'‚ùå PyMySQL import failed: {e}')
              except Exception as e:
                  print(f'‚ùå PyMySQL connection failed: {e}')
          
          if connection_successful:
              print('üéâ Test po≈ÇƒÖczenia zako≈Ñczony SUKCESEM!')
          else:
              print('üí• Test po≈ÇƒÖczenia NIEUDANY!')
              exit(1)
          " 