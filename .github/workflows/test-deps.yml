name: 🧪 Test Dependencies

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Typ testu'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full

jobs:
  test-deps:
    name: 🔍 Test Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout kodu
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
        
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: 🔧 Zainstaluj system dependencies dla MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config
          
      - name: 📦 Test instalacji zależności Python
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # Sprawdź requirements.txt
          echo "📋 Zawartość requirements.txt:"
          if [ -f requirements.txt ]; then
            cat requirements.txt | head -15
          else
            echo "❌ Brak pliku requirements.txt!"
            exit 1
          fi
          
          # Zainstaluj WSZYSTKIE podstawowe zależności ręcznie w pierwszej kolejności
          echo "🔧 Instalowanie kluczowych zależności..."
          pip install requests==2.31.0
          pip install beautifulsoup4==4.12.2
          pip install selenium==4.16.0
          pip install lxml==4.9.3
          pip install python-dotenv==1.0.0
          pip install pandas==2.1.4
          
          # MySQL connectory
          echo "🔧 Instalowanie mysql-connector-python..."
          pip install mysql-connector-python==8.2.0
          
          echo "🔧 Instalowanie PyMySQL jako backup..."
          pip install PyMySQL==1.1.0
          
          # Test importów podstawowych pakietów
          echo "🔍 Test importów kluczowych pakietów..."
          python -c "
          import sys
          print(f'🐍 Python version: {sys.version}')
          
          packages_to_test = [
              ('requests', 'requests'),
              ('beautifulsoup4', 'bs4'),
              ('selenium', 'selenium'),
              ('lxml', 'lxml'),
              ('python-dotenv', 'dotenv'),
              ('pandas', 'pandas'),
              ('mysql.connector', 'mysql.connector'),
              ('pymysql', 'pymysql')
          ]
          
          failed_imports = []
          for package_name, import_name in packages_to_test:
              try:
                  __import__(import_name)
                  print(f'✅ {package_name}: OK')
              except ImportError as e:
                  print(f'❌ {package_name}: FAILED - {e}')
                  failed_imports.append(package_name)
              except Exception as e:
                  print(f'❌ {package_name}: ERROR - {e}')
                  failed_imports.append(package_name)
          
          if failed_imports:
              print(f'💥 Błędne importy: {failed_imports}')
              exit(1)
          else:
              print('✅ Wszystkie kluczowe pakiety zainstalowane poprawnie!')
          "
          
      - name: 🔍 Test importów w kontekście projektu
        run: |
          echo "🔍 Test importów w kontekście scrapera:"
          python -c "
          import sys
          import os
          
          print(f'Working directory: {os.getcwd()}')
          print(f'Python path: {sys.path[:3]}...')
          
          try:
              import requests
              print('✅ requests: OK')
          except Exception as e:
              print(f'❌ requests: {e}')
              
          try:
              import bs4
              print('✅ beautifulsoup4: OK')
          except Exception as e:
              print(f'❌ beautifulsoup4: {e}')
              
          try:
              from utils import get_soup
              print('✅ utils.get_soup: OK')
          except Exception as e:
              print(f'❌ utils.get_soup: {e}')
              
          try:
              from src.scrapers.otodom_scraper import get_otodom_listings
              print('✅ otodom_scraper: OK')
          except Exception as e:
              print(f'❌ otodom_scraper: {e}')
          "
          
      - name: ✅ Podsumowanie testu
        run: |
          echo "🎉 Test instalacji zależności zakończony pomyślnie!"
          echo "📦 Zainstalowane pakiety:"
          pip list | grep -E "(requests|beautiful|selenium|mysql|pandas)" || echo "❌ Brak kluczowych pakietów" 